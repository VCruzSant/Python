# Polimorfismo em Python Orientado a Objetos
# Polimorfismo √© o princ√≠pio que permite que
# classes deridavas de uma mesma superclasse
# tenham m√©todos iguais (com mesma assinatura)
# mas comportamentos diferentes.
# Assinatura do m√©todo = Mesmo nome e quantidade
# de par√¢metros (retorno n√£o faz parte da assinatura)
# Opini√£o + princ√≠pios que contam:
# Assinatura do m√©todo: nome, par√¢metros e retorno iguais
# SO"L"ID
# Princ√≠pio da substitui√ß√£o de liskov
# Objetos de uma superclasse devem ser substitu√≠veis
# por objetos de uma subclasse sem quebrar a aplica√ß√£o.
# Sobrecarga de m√©todos (overload)  üêç = ‚ùå
# Sobreposi√ß√£o de m√©todos (override) üêç = ‚úÖ
from abc import ABC, abstractmethod

class Notification(ABC):
    def __init__(self, msg):
        self._msg = msg
    
    # enviar notifica√ß√£o para que ? para notifica√ß√£o de celular ? notifica√ß√£o no e-mail? sms ?
    # por isso usamos polimorfismo com abstra√ß√£o
    @abstractmethod
    def send_notif(self) -> bool:... #essa setinha √© sobre type anotations (dica pra n√≥s mesmos)



class NotificationEmail(Notification):
    def send_notif(self) -> bool:
        print('E-mail: enviando....', self._msg)
        return True

class NotificationSms(Notification):
    def send_notif(self) -> bool:
        print('SMS: enviando....', self._msg)
        return True

# ne = NotificationEmail('Quero te enviar um e-mail sla')
# ne.send_notif()
# # para por o Liskov substution principle em pratica:
# # se eu alterar ne = NotificationEmail('Quero te enviar um e-mail sla') -> por outra subclasse, o programa n√£o deve ser quebrado:
# ns = NotificationSms('Quero te enviar um sms sla')
# ns.send_notif()
# # poderia substituir a classe apenas, mas ja serve como exemplo

# o parametro notif, pode ser alterado, ser outro obj, sem quebrar a aplica√ß√£o
def notify(notif: Notification):
    notif_sended = notif.send_notif()

    if notif_sended:
        print('Notifica√ß√£o enviada')
        return
    
    print('Notifica√ß√£o n√£o foi enviada')

nne = NotificationEmail('enviando isso por e-mail')
nns = NotificationSms('enviando isso por sms')

notify(nne)

